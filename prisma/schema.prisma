// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  google
  github
}

model User {
  id               String            @id @default(uuid())
  name             String?
  email            String            @unique
  authType         AuthType
  image            String?
  userDeckMappings UserDeckMapping[]
  srsCardMetadata  SRSCardMetadata[]
  deckMetadata     DeckMetadata[]
  studySessions    StudySession[]
}

model Flashcard {
  id                String            @id @default(uuid())
  front             String
  back              String
  deckId            String
  deck              FlashcardDeck     @relation(fields: [deckId], references: [id])
  srsCardMetadata   SRSCardMetadata[]
  studySessionCards StudySessionCard[]
}

model FlashcardDeck {
  id               String            @id @default(uuid())
  name             String
  flashcards       Flashcard[]
  userDeckMappings UserDeckMapping[]
  deckMetadata     DeckMetadata[]
  studySessions    StudySession[]
}

enum UserDeckType {
  EDITOR
  VIEWER
}

model UserDeckMapping {
  id     String        @id @default(uuid())
  userId String
  deckId String
  user   User          @relation(fields: [userId], references: [id])
  deck   FlashcardDeck @relation(fields: [deckId], references: [id])
  type   UserDeckType
}

enum SRSDifficulty {
  AGAIN
  HARD
  EASY
}

model SRSCardMetadata {
  id           String        @id @default(uuid())
  userId       String
  flashcardId  String
  
  easeFactor   Float         @default(1.3)    
  interval     BigInt        @default(1)     
  repetitions  Int           @default(-1)      
  
  lastReviewed DateTime?     
  nextReview   DateTime?      
  
  // Review counts for RAG analysis
  easyReviewCount  Int         @default(0)
  hardReviewCount  Int         @default(0)
  againReviewCount Int         @default(0)
  
  user         User          @relation(fields: [userId], references: [id])
  flashcard    Flashcard     @relation(fields: [flashcardId], references: [id])
  
  @@unique([userId, flashcardId])
}

model DeckMetadata {
  id              String        @id @default(uuid())
  userId          String
  deckId          String
  newCardCount    Int           @default(20)
  reviewCardCount Int           @default(100)
  
  user            User          @relation(fields: [userId], references: [id])
  deck            FlashcardDeck @relation(fields: [deckId], references: [id])
  
  @@unique([userId, deckId])
}

enum StudySessionStatus {
  PENDING
  PROCESSING
  READY
  FAILED
}

model StudySession {
  id          String             @id @default(uuid())
  userId      String
  deckId      String
  prompt      String
  maxCards    Int
  status      StudySessionStatus @default(PENDING)
  createdAt   DateTime           @default(now())
  completedAt DateTime?
  
  user        User               @relation(fields: [userId], references: [id])
  deck        FlashcardDeck      @relation(fields: [deckId], references: [id])
  cards       StudySessionCard[]
}

model StudySessionCard {
  id              String       @id @default(uuid())
  studySessionId  String
  flashcardId     String
  order           Int
  
  studySession    StudySession @relation(fields: [studySessionId], references: [id], onDelete: Cascade)
  flashcard       Flashcard    @relation(fields: [flashcardId], references: [id])
  
  @@unique([studySessionId, order])
}
